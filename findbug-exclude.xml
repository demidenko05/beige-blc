<?xml version="1.0" encoding="UTF-8"?>
<FindBugsFilter>
  <!--It's for best performance, it allows to use outdated (last version) data but it never causes
    serious problems for this task.-->
  <Match>
     <Class name="org.beigesoft.hnd.HndI18nRq" />
     <Bug pattern="IS2_INCONSISTENT_SYNC" />
  </Match>
  <!--It's reliable synchronization method. There is no way to use dirty/partially initialized data.
    It's for best performance.-->
  <Match>
     <Class name="org.beigesoft.prp.Setng" />
     <Bug pattern="IS2_INCONSISTENT_SYNC" />
  </Match>
  <!--See test DoubleCkeckLockingRiApTest. Assigning fully
  initialized bean to the class variable is reliable method.-->
  <Match>
     <Class name="org.beigesoft.hnd.HndI18nRq" />
     <Bug pattern="DC_DOUBLECHECK" />
  </Match>
  <Match>
     <Class name="org.beigesoft.prp.Setng" />
     <Bug pattern="DC_DOUBLECHECK" />
  </Match>
  <!-- 1 - no need, 2 - opinion: https://sourceforge.net/p/findbugs/bugs/1379/: -->
  <Match>
     <Class name="org.beigesoft.prp.LnkPrps" />
     <Bug pattern="EQ_DOESNT_OVERRIDE_EQUALS" />
  </Match>
  <!--EI_EXPOSE_REP/2 is resource unfriendly approach to avoid object's unexpected changes.
  In real program the most of objects (not only Date and arrays) is mutable.
  These are also POJO-unfriendly rules.
  Using annotation "immutable" is the best way to implements logic: "do not change
  mutable object outside or better - by annotated allowChangeImmutableFor[]".-->
  <Match>
     <Class name="org.beigesoft.hld.HldUvd" />
     <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
     <Class name="org.beigesoft.hld.HldUvd" />
     <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
</FindBugsFilter>
