/*
BSD 2-Clause License

Copyright (c) 2019, Beigesoftâ„¢
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.beigesoft.srv;


import java.io.Reader;

/**
 * <p>JSP utility.</p>
 *
 * @author Yury Demidenko
 */
public class UtlJsp {

  /**
   * <p>Convert source from Reader to JSON string.
   * I.e. replace new lines with '\n' (U+000A) and so on.
   * It also close Reader cause it's assumed
   * to be used it a JSP page.
   * JSP make a lot of userless new lines, spaces,
   * so they will be removed</p>
   * @param source to be converted
   * @return String JSON adapted
   * @throws Exception an exception
   **/
  public final String toJsonStrCls(final Reader source) throws Exception {
    StringBuffer sb = new StringBuffer();
    int chi;
    boolean isStartSpaces = false;
    while ((chi = source.read()) != -1) {
      char ch = (char) chi;
      isStartSpaces = addJsonChar(ch, sb, isStartSpaces);
    }
    source.close();
    return sb.toString();
  }

  /**
   * <p>Convert string to JSON string.
   * I.e. replace new lines with '\n' (U+000A) and so on.
   * It also close Reader cause it's assumed
   * to be used it a JSP page.
   * JSP make a lot of userless new lines, spaces,
   * so they will be removed</p>
   * @param source to be converted
   * @return String JSON adapted
   * @throws Exception an exception
   **/
  public final String toJsonStr(final String source) throws Exception {
    StringBuffer sb = new StringBuffer();
    boolean isStartSpaces = false;
    for (int i = 0; i < source.length(); i++) {
      char ch = source.charAt(i);
      isStartSpaces = addJsonChar(ch, sb, isStartSpaces);
    }
    return sb.toString();
  }

  /**
   * <p>Adapt char to Json and add into stringbuffer.</p>
   * @param pCh to be adapted
   * @param pSb StringBuffer
   * @param pIsStartSpaces if it is start/continue spaces
   * @return if it is start/continue spaces
    **/
  public final boolean addJsonChar(final char pCh,
    final StringBuffer pSb, final boolean pIsStartSpaces) {
    boolean isStartSpaces;
    if (pCh == ' ') {
      if (!pIsStartSpaces) {
        isStartSpaces = true;
      } else {
        return true; //it's continue spaces, so remove them
      }
    } else {
      isStartSpaces = false;
    }
    if (!isUseless(pCh)) { //JSP makes a lot of useless new lines,
      //so they will be removed
      if (isJsonAdaptable(pCh)) {
        pSb.append('\\');
      }
      pSb.append(pCh);
    }
    return isStartSpaces;
  }

  /**
   * <p>Check if character is useless
   * cause generated by JSP.</p>
   * @param ch char to check
   * @return if need to adapt
   **/
  public final boolean isUseless(final char ch) {
    return ch == '\n' || ch == '\r';
  }

  /**
   * <p>Check if character need to be JSON adapted.
   * I.e. if it is new line...</p>
   * @param ch char to check
   * @return if need to adapt
   **/
  public final boolean isJsonAdaptable(final char ch) {
    return ch == '"' || ch == '\\' || ch == '/'
        || ch == '\b' || ch == '\f' || ch == '\n'
          || ch == '\r' || ch == '\t';
  }

  /**
   * <p>Remove apostrophes from string.</p>
   * @param pSource string with apostrophes
   * @return String without apos
   **/
  public final String removeApos(final String pSource) {
    return pSource.replace("'", "");
  }

  /**
   * <p>To compare for inside JSP EL.</p>
   * @return String "&gt;"
   **/
  public final String getGt() {
    return ">";
  }

  /**
   * <p>To compare for inside JSP EL.</p>
   * @return String "&lt;"
   **/
  public final String getLt() {
    return "<";
  }

  /**
   * <p>Return either string null if src is null or src with quotes.</p>
   * @param src string
   * @return String null or "[src]"
   **/
  public final String nullOrJsonStr(final String src) {
    if (src == null || src.length() == 0) {
      return "null";
    } else {
      return "\"" + src + "\"";
    }
  }

  /**
   * <p>Clip file name from full path.</p>
   * @param pPath string
   * @return String file name
   **/
  public final String evFileNmNoExt(final String pPath) {
    int idxStart = 0;
    int idxEnd = pPath.length();
    int lastFs = pPath.lastIndexOf('/');
    if (lastFs == -1) {
      lastFs = pPath.lastIndexOf('\\');
    }
    if (lastFs != -1) {
      idxStart = lastFs + 1;
    }
    int idxDot = pPath.lastIndexOf('.');
    if (idxDot != -1) {
      idxEnd = idxDot;
    }
    return pPath.substring(idxStart, idxEnd);
  }
}
